#!/usr/bin/env python
#encoding: utf-8

# Auto-install and activate a virtualenv if possible
import autovenv
autovenv.run()

import json
import multiprocessing
import os
import struct
import time

import requests
from flask import Flask
from jinja2 import Template
from plucky import plucks

from utils import (
    DEBUG,
    log,
    script_directory,
)
from config import (
    API_SERVER,
    API_PATH,
    FB_APP_ID,
)


# Web server should rewrite urls from certain UA's with this prefix
PREFIX = '/opengraph/'
ALL_PATH = f'{API_SERVER}{API_PATH}/all'
CONFIG_PATH = f'{API_SERVER}{API_PATH}/config'
API_CACHE_FILE = 'apicache'
API_CACHE_LIFESPAN = 60 * 5


template = '''
<!DOCTYPE html>
<html>
    <head>
        <title>{title}</title>
        <meta charset="utf-8">
        <meta property="fb:app_id" content="%s" />
        <meta property="og:title" content="{title}" />
        <meta property="og:description" content="{tagline}" />
        <meta property="og:type" content="article" />
        <meta property="og:url" content="https://beautifulrising.org/{path}" />
        <meta property="og:image" content="https://beautifulrising.org/{image}" />
        <meta property="og:image:width" content="{image_w}" />
        <meta property="og:image:height" content="{image_h}" />
        <meta property="og:site_name" content="{site_title}" />
        <meta name="twitter:site" content="@beautrising" />
        <meta name="twitter:card" content="summary" />
        <meta name="twitter:image:src" content="https://beautifulrising.org/{image}" />
    </head>
    <body></body>
</html>
''' % FB_APP_ID


app = Flask(__name__)


def get_image_size(filename, w=1170, h=400):
    '''
    Low-effort attempt to determine image size with fallback values on failure
    Header parsing simplified from https://github.com/scardine/image_size
    '''
    try:
        path = '.' + os.path.join(config['asset-path'], filename)
        with open(path, 'rb') as image:
            data = image.read(26)
            size = len(data)
            # png
            if size >= 24 and data.startswith(b'\211PNG\r\n\032\n') and data[12:16] == b'IHDR':
                w, h = struct.unpack('>LL', data [16:24])
            # older png
            elif size >= 16 and data.startswith(b'\211PNG\r\n\032\n'):
                w, h = struct.unpack('>LL', data[8:16])
            # jpeg
            elif size >= 2 and data.startswith(b'\377\330'):
                image.seek(2)
                b = image.read(1)
                while b and ord(b) != 0xda:
                    while ord(b) != 0xff:
                        b = image.read(1)
                    while ord(b) == 0xff:
                        b = image.read(1)
                    if ord(b) >= 0xc0 and ord(b) <= 0xc3:
                        image.read(3)
                        h, w = struct.unpack('>HH', image.read(4))
                        break
                    else:
                        image.read(int(struct.unpack('>H', image.read(2))[0]) - 2)
                    b = image.read(1)
    except: pass
    return w, h


def cache_content():
    '''
    Periodically cache API content for performance
    TODO: This would be useful to a number of microservices so it should
          probably be moved to a general purpose task
    '''
    while True:
        data = {}
        for language in config.get('language-all', ['en']):
            data[language] = requests.get(f'{ALL_PATH}?lang={language}').json()
        with script_directory():
            with open(API_CACHE_FILE, 'w') as f:
                json.dump(data, f)
        log(f'apicache: sleeping for {API_CACHE_LIFESPAN} seconds')
        time.sleep(API_CACHE_LIFESPAN)


def get_cache(language):
    with script_directory():
        with open(API_CACHE_FILE) as f:
            data = json.load(f)
            content = data.get(language, data.get('en'))
    return content


def get_title_tagline_image(content):
    ui = by_slug(content, 'ui')
    promo = by_slug(content, 'promo')
    return plucks(ui, 'misc.site-title'), promo.get('tagline', ''), promo.get('image', '')


def by_slug(content, slug, tools_only=False):
    if tools_only:
        types = []
        for c in content:
            if c.get('type') == 'config' and c.get('slug') == 'api':
                types = [T.get('one') for T in c.get('types-modules', [])]
                break
        for c in content:
            if c.get('type') in types and c.get('slug') == slug:
                return c
    else:
        for c in content:
            if c.get('slug') == slug:
                return c
    return {}


@app.route(PREFIX)
@app.route(PREFIX + '<string(length=2):lang>/<path:path>')
@app.route(PREFIX + '<string(length=2):lang>')
@app.route(PREFIX + '<path:path>')
def fake_any(lang='', path=''):
    content = get_cache(lang)

    title, tagline, image = get_title_tagline_image(content)
    image_w, image_h = get_image_size(image)

    if lang and path:
        path = f'{lang}/{path}'
    elif lang:
        path = lang

    return template.format(title=title, site_title=title, tagline=tagline,
        image=image, image_w=image_w, image_h=image_h, path=path)


@app.route(PREFIX + 'tool/<slug>', methods=['GET'])
@app.route(PREFIX + '<string(length=2):lang>/tool/<slug>', methods=['GET'])
def fake_tool(lang='', slug=''):
    content = get_cache(lang)
    tool = by_slug(content, slug, tools_only=True)

    site_title, tagline, image = get_title_tagline_image(content)
    image = tool.get('image', image)
    image_w, image_h = get_image_size(image)
    tagline = tool.get('snapshot', tagline)
    title = tool.get('title', site_title)
    if title != site_title:
        title = f'{site_title}: {title}'

    path = f'tool/{slug}'
    if lang:
        path = f'{lang}/tool/{slug}'

    return template.format(title=title, site_title=site_title, tagline=tagline,
        image=image, image_w=image_w, image_h=image_h, path=path)


if __name__ == '__main__':
    config = requests.get(CONFIG_PATH).json()
    multiprocessing.Process(target=cache_content).start()
    app.run(port=6002, debug=DEBUG)

