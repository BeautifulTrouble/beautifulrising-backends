#!/usr/bin/env python

import autovenv
autovenv.run()


import asyncio
import json
import os
import shlex
import subprocess
import sys

import magic
import pyppeteer
import requests
from bs4 import BeautifulSoup

from utils import (
    die,
    log,
    warn,
)
from config import (
    PUPPETEER_ARGS,
)



CAN_OVERWRITE = [
    'image/png',
    'image/jpeg',
    'image/gif',
    'text/html',    # Sometimes you get a page instead of an image
]


def download_og_image(url, output_path):
    '''
    Attempt to download an OpenGraph og:image
    If that succeeds, this function will return true
    '''

    try:
        html = requests.get(url).text
    except requests.RequestException:
        return

    for element in BeautifulSoup(html, 'html.parser').select('meta[property="og:image"]'):
        ogimageurl = element.get('content')
        if ogimageurl:
            try:
                log(f'preview: og:image {output_path}')
                r = requests.get(ogimageurl)
            except requests.RequestException:
                return
            if r.status_code == 200:
                with open(output_path, 'wb') as f:
                    f.write(r.content)
                    subprocess.run(['convert', '-resize', 'x512', output_path, output_path])
                    return True


async def main(urls_and_outputs):
    log('pyppeteer: starting up...')

    args = shlex.split(PUPPETEER_ARGS)
    browser = await pyppeteer.launch(args=args)

    for url, output_path in urls_and_outputs.items():
        if os.path.isfile(output_path):
            if magic.from_file(output_path, mime=True) not in CAN_OVERWRITE:
                warn(f'preview: not overwriting {output_path}')
                continue

        if not download_og_image(url, output_path):
            try:
                page = await browser.newPage()
                await page.setViewport({'width': 1366, 'height': 768, 'deviceScaleFactor': 0.5})
                log(f'preview: rendering {output_path}')
                await page.goto(url, {'timeout': 15000})
                await page.screenshot({'path': output_path})
                await page.close()
                #subprocess.run(['convert', '-resize', '50%', output_path, output_path])
            except (pyppeteer.errors.PyppeteerError, pyppeteer.errors.TimeoutError) as e:
                warn(f'pyppeteer: {e} ({url})')
            except ConnectionError:
                await browser.close()
                browser = await pyppeteer.launch(args=args)

    log('preview: finished')
    await browser.close()


if __name__ == '__main__':
    if len(sys.argv) != 2:
        die(f'preview: Usage: {os.path.basename(sys.argv[0])} JSON_MAPPING_OF_URLS:OUTPUTS')
    try:
        urls_and_outputs = json.loads(sys.argv[1])
    except json.decoder.JSONDecodeError:
        die('preview: unable to load json mapping of urls to output files')

    loop = asyncio.get_event_loop()
    loop.run_until_complete(main(urls_and_outputs))

