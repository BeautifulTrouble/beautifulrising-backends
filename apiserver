#!/usr/bin/env python3

import autovenv
autovenv.run()

import os
import sys
from subprocess import Popen
from urllib.parse import urlparse

import couchdb
from couchdb.http import ResourceNotFound
from flask import Flask, Response, request, jsonify
from flask_restful import Resource, Api
from werkzeug.exceptions import NotFound, Forbidden

from utils import *


PORT = 6000
PREFIX = 'api/v1'
GOOGLE_VERIFICATION = 'google5844dd3c739be066.html'


app = Flask(__name__)
api = Api(app)
couch = couchdb.Server()
db = couch['toolbox']
config = db['config:api']


def flatten_args(args, sep=','):
    '''
    Flatten a werkzeug MultiDict containing duplicate, optionally comma-
    separated query parameters to a dictionary of lists without duplicates
        e.g.:     "?name=foo&tags=a,b&tags=c,d&tags=d"
        becomes:  {'name': ['foo'], 'tags': ['a', 'c', 'b', 'd']}
    '''
    return {k: list({i for splitL in (L.split(sep) for L in args.getlist(k)) for i in splitL})
            for k in args}


def header(name):
    '''
    Always get a string, even for missing headers
    '''
    return request.headers.get(name, '')


@app.route('/' + GOOGLE_VERIFICATION)
def google_verification():
    '''
    Keep the googles happy
    '''
    return 'google-site-verification: {}'.format(GOOGLE_VERIFICATION)


@app.route(urlparse(config['notification-url']).path, methods=['POST'])
def notify():
    '''
    Handle change notifications
    '''
    # Before doing anything, verify the notification token
    if header('X-Goog-Channel-Token') != config['notification-token']:
        raise Forbidden

    state = header('X-Goog-Resource-State')
    channel_id = header('X-Goog-Channel-Id')
    resource_id = header('X-Goog-Resource-Id')

    # Save new notification ids so they can be cancelled
    if state == 'sync':
        log("sync: Channel-Id: {} Resource-Id: {}".format(channel_id, resource_id))
        try:
            channels = db['config:notification-channels']
            channels[channel_id] = resource_id
        except ResourceNotFound:
            channels = {channel_id: resource_id}
            channels.update({'_id': 'config:notification-channels'})
        db.save(channels)

    # Attempt to invoke the content loader
    elif state == 'change':
        log("change: Channel-Id: {} Resource-Id: {}".format(channel_id, resource_id))
        body = request.get_json()
        if body:
            with script_directory():
                change_number = str(int(body['id']))
                # Using sys.executable ensures the virtualenv currently in effect 
                # for this server will also be used for the contentloader tool.
                pid = Popen([sys.executable, "contentloader", "--change", change_number]).pid

    return 'OK'


# In lieu of a proper couchdb design document, here's a temporary query
#query_by_type = "function(doc){if(doc.type=='%s'){emit(doc.slug,doc)}}"


# Get content types and create endpoints
types = {slugify(T['one']): slugify(T['many']) for T in config['types']}
for singular_name,plural_name in types.items():
    
    class Many(Resource):
        type = singular_name
        query = "function(doc){if(doc.type=='%s'){emit(doc.slug,doc)}}" % singular_name
        def get(self):
            try:
                resources = [doc['value'] for doc in db.query(self.query)]
            except (KeyError, ResourceNotFound): raise NotFound
            args = flatten_args(request.args)
            filtered = []
            if 'tags' in args:
                for doc in resources:
                    pass
                    # filtering should be generic, no?
                    # here's where we look at the taxonomies
                    # which should be in the config.
                    
                    
                #resources = [d for d in 
                print(args['tags'])
            
            return resources
    api.add_resource(Many, '/{PREFIX}/{plural_name}'.format(**vars()), endpoint=plural_name)


    class One(Resource):
        type = singular_name
        def get(self, id):
            try:
                resource = db['{}:{}'.format(self.type, id)]
            except ResourceNotFound: raise NotFound
            return resource
    api.add_resource(One, '/{PREFIX}/{singular_name}/<id>'.format(**vars()), endpoint=singular_name)
            

# Expose the config for front-ends
class Config(Resource):
    def get(self):
        return {k:v for k,v in config.items() if k != 'notification-token'}
api.add_resource(Config, '/{PREFIX}/config'.format(**vars()))


if __name__ == '__main__':
    app.run(port=PORT, debug='debug' in sys.argv)

